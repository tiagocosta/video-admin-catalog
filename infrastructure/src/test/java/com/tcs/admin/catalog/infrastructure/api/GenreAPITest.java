package com.tcs.admin.catalog.infrastructure.api;import com.fasterxml.jackson.databind.ObjectMapper;import com.tcs.admin.catalog.ControllerTest;import com.tcs.admin.catalog.application.genre.create.CreateGenreOutput;import com.tcs.admin.catalog.application.genre.create.CreateGenreUseCase;import com.tcs.admin.catalog.application.genre.retrieve.get.GenreOutput;import com.tcs.admin.catalog.application.genre.retrieve.get.GetGenreByIdUseCase;import com.tcs.admin.catalog.domain.category.CategoryID;import com.tcs.admin.catalog.domain.exceptions.NotFoundException;import com.tcs.admin.catalog.domain.exceptions.NotificationException;import com.tcs.admin.catalog.domain.genre.Genre;import com.tcs.admin.catalog.domain.genre.GenreID;import com.tcs.admin.catalog.domain.validation.Error;import com.tcs.admin.catalog.domain.validation.handler.Notification;import com.tcs.admin.catalog.infrastructure.genre.models.CreateGenreRequest;import org.hamcrest.Matchers;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.MediaType;import org.springframework.test.context.bean.override.mockito.MockitoBean;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import java.util.List;import java.util.Objects;import static org.mockito.Mockito.*;import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;@ControllerTest(controllers = GenreAPI.class)public class GenreAPITest {    @Autowired    private MockMvc mockMvc;    @Autowired    private ObjectMapper mapper;    @MockitoBean    private CreateGenreUseCase createGenreUseCase;    @MockitoBean    private GetGenreByIdUseCase getGenreByIdUseCase;    @Test    public void givenValidCommand_whenCallsCreateGenre_thenReturnGenreId() throws Exception {        final var expectedName = "Drama";        final var expectedIsActive = true;        final var expectedCategories = List.of("123", "456");        final var expectedId = "123";        final var anInput =                new CreateGenreRequest(expectedName, expectedIsActive, expectedCategories);        when(createGenreUseCase.execute(any()))                .thenReturn(CreateGenreOutput.from(expectedId));        final var request = MockMvcRequestBuilders.post("/genres")                .contentType(MediaType.APPLICATION_JSON)                .content(mapper.writeValueAsString(anInput));        this.mockMvc.perform(request)                .andDo(print())                .andExpect(status().isCreated())                .andExpect(header().string("Location", "/genres/123"))                .andExpect(header().string("Content-Type", MediaType.APPLICATION_JSON_VALUE))                .andExpect(jsonPath("$.id", Matchers.equalTo("123")));        verify(createGenreUseCase, times(1)).execute(argThat(cmd ->                Objects.equals(expectedName, cmd.name())                        && Objects.equals(expectedIsActive, cmd.isActive())                        && Objects.equals(expectedCategories, cmd.categories())        ));    }    @Test    public void givenInvalidName_whenCallsCreateGenre_thenReturnNotification() throws Exception {        final String expectedName = null;        final var expectedIsActive = true;        final var expectedCategories = List.of("123", "456");        final var expectedErrorMessage = "'name' should not be null";        final var anInput =                new CreateGenreRequest(expectedName, expectedIsActive, expectedCategories);        when(createGenreUseCase.execute(any()))                .thenThrow(new NotificationException("Error", Notification.create(new Error(expectedErrorMessage))));        final var request = MockMvcRequestBuilders.post("/genres")                .contentType(MediaType.APPLICATION_JSON)                .content(mapper.writeValueAsString(anInput));        this.mockMvc.perform(request)                .andDo(print())                .andExpect(status().isUnprocessableEntity())                .andExpect(header().string("Content-Type", MediaType.APPLICATION_JSON_VALUE))                .andExpect(jsonPath("$.errors", Matchers.hasSize(1)))                .andExpect(jsonPath("$.errors[0].message", Matchers.equalTo(expectedErrorMessage)));        verify(createGenreUseCase, times(1)).execute(argThat(cmd ->                Objects.equals(expectedName, cmd.name())                        && Objects.equals(expectedIsActive, cmd.isActive())                        && Objects.equals(expectedCategories, cmd.categories())        ));    }    @Test    public void givenValidId_whenCallsGetGenreById_thenReturnGenre() throws Exception {        final var expectedName = "Drama";        final var expectedIsActive = false;        final var expectedCategories = List.of("123", "456");        final var aGenre =                Genre.newGenre(expectedName, expectedIsActive)                        .addCategories(expectedCategories.stream()                                .map(CategoryID::from)                                .toList()                        );        final var expectedId = aGenre.getId().getValue();        when(getGenreByIdUseCase.execute(any()))                .thenReturn(GenreOutput.from(aGenre));        final var request = MockMvcRequestBuilders.get("/genres/{id}", expectedId)                .contentType(MediaType.APPLICATION_JSON);        this.mockMvc.perform(request)                .andDo(print())                .andExpect(status().isOk())                .andExpect(header().string("Content-Type", MediaType.APPLICATION_JSON_VALUE))                .andExpect(jsonPath("$.id", Matchers.equalTo(expectedId)))                .andExpect(jsonPath("$.name", Matchers.equalTo(expectedName)))                .andExpect(jsonPath("$.is_active", Matchers.equalTo(expectedIsActive)))                .andExpect(jsonPath("$.categories_id", Matchers.equalTo(expectedCategories)))                .andExpect(jsonPath("$.created_at", Matchers.equalTo(aGenre.getCreatedAt().toString())))                .andExpect(jsonPath("$.updated_at", Matchers.equalTo(aGenre.getUpdatedAt().toString())))                .andExpect(jsonPath("$.deleted_at", Matchers.equalTo(aGenre.getDeletedAt().toString())))        ;        verify(getGenreByIdUseCase, times(1)).execute(eq(expectedId));    }    @Test    public void givenInvalidId_whenCallsGetGenreById_thenReturnNotFound() throws Exception {        final var expectedErrorMessage = "Genre with ID 123 was not found";        final var expectedId = GenreID.from("123");        when(getGenreByIdUseCase.execute(any()))                .thenThrow(NotFoundException.with(Genre.class, expectedId));        final var request = MockMvcRequestBuilders.get("/genres/{id}", expectedId.getValue())                .contentType(MediaType.APPLICATION_JSON);        this.mockMvc.perform(request)                .andDo(print())                .andExpect(status().isNotFound())                .andExpect(header().string("Content-Type", MediaType.APPLICATION_JSON_VALUE))                .andExpect(jsonPath("$.message", Matchers.equalTo(expectedErrorMessage)));        ;        verify(getGenreByIdUseCase, times(1)).execute(eq(expectedId.getValue()));    }}